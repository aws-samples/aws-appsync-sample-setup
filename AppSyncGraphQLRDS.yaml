AWSTemplateFormatVersion: 2010-09-09
Description:
  "Creates resources necessary for GraphQL RDS integration"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network configuration
        Parameters:
          - VPCCIDR
          - PrivateSubnetOneCIDR
          - PrivateSubnetTwoCIDR
          - PublicSubnetOneCIDR
      - Label:
          default: Choose a deployment option
        Parameters:
          - RDSClusterMode
      - Label:
          default: RDS Standard Mode Configuration
        Parameters:
          - DBInstanceClass
          - Cloud9InstanceType
          - AutoHibernateTimeout
      - Label:
          default: RDS Serverless Mode Configuration
        Parameters:
          - AutoPauseCluster
          - SecondsUntilAutoPause
          - MinCapacity
          - MaxCapacity
      - Label:
          default: AppSync
        Parameters:
          - AppSyncAuthenticationType
          - GraphQLAdapterLocation
          - GraphQLAdapterName
          - GraphQLSchemaLocation
          - GraphQLSchemaName
          - RDSSchemaLocation
          - RDSSchemaName

Parameters:
  RDSClusterMode:
    Type: String
    AllowedValues:
      - Serverless
      - Standard
    Default: Serverless
    Description: >
      Choose whether to deploy a standard Amazon Aurora or Serverless (v1).

  AutoPauseCluster:
    Type: String
    AllowedValues:
      - true
      - false
    Default: true
    Description: Do you want the serverless cluster to scale the capacity to 0 ACUs when cluster is idle?

  SecondsUntilAutoPause:
    Type: Number
    AllowedValues:
      - 300
      - 600
      - 1200
      - 3600
      - 14400
      - 28800
      - 86400
    Default: 300
    Description: >
      The time, in seconds, before an Aurora DB cluster in serverless mode is paused (scale capacity
      down to 0 ACU). Values are 5/10/20 minutes, 1/4/8/24 hours.

  MinCapacity:
    Type: Number
    AllowedValues:
      - 2
      - 4
      - 8
      - 16
      - 32
      - 64
      - 192
      - 384
    Default: 2
    Description: >
      The minimum capacity for an Aurora DB cluster in serverless DB engine mode.

  MaxCapacity:
    Type: Number
    AllowedValues:
      - 2
      - 4
      - 8
      - 16
      - 32
      - 64
      - 192
      - 384
    Default: 16
    Description: >
      The maximum capacity for an Aurora DB cluster in serverless DB engine mode. 
      This value should be greater than or equal to MinCapacity. 

  VPCCIDR:
    Type: String
    Description: VPC CIDR
    Default: "10.0.1.0/26"
  PrivateSubnetOneCIDR:
    Type: String
    Description: Subnet One CIDR
    Default: "10.0.1.0/28"
  PrivateSubnetTwoCIDR:
    Type: String
    Description: Subnet One CIDR
    Default: "10.0.1.16/28"
  PublicSubnetOneCIDR:
    Type: String
    Description: Public Subnet One CIDR
    Default: "10.0.1.32/28"
  DBInstanceClass:
    Description: RDS Instance Class
    Type: String
    Default: db.t3.medium
    AllowedValues:
      - db.r5.large
      - db.r5.xlarge
      - db.r5.2xlarge
      - db.r5.4xlarge
      - db.r5.8xlarge
      - db.t3.medium
      - db.t3.large

  Cloud9InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  AutoHibernateTimeout:
    Description:  How many minutes idle before shutting down the IDE. Options, 30 minutes, 1 hour, 4 hours, 1day, 1week, Never (0)
    Type:         Number
    Default:      30
    AllowedValues:
      - 30
      - 60
      - 240
      - 1440
      - 10080
      - 0
  AppSyncAuthenticationType:
    Description: How do you want to authenticate to the AppSync endpoint?
    Type: String
    Default: API_KEY
    AllowedValues:
      - AWS_IAM
      - API_KEY

  GraphQLAdapterLocation:
    Description: Provide the location of the JAR or ZIP file.
    Type: String

  GraphQLAdapterName:
    Description: Adapter name
    Type: String

  GraphQLSchemaLocation:
    Description: Provide the location of GraphQL schema.
    Type: String

  GraphQLSchemaName:
    Description: GraphQL schema name.
    Type: String

  RDSSchemaLocation:
    Description: Provide the location of RDS schema.
    Type: String

  RDSSchemaName:
    Description: RDS Schema name
    Type: String

Mappings:
  SnapStartRegionMap:
    us-east-1:
      "SnapStart": "true"
    us-east-2:
      "SnapStart": "true"
    us-west-2:
      "SnapStart": "true"
    ap-southeast-1:
      "SnapStart": "true"
    ap-southeast-2:
      "SnapStart": "true"
    ap-northeast-1:
      "SnapStart": "true"
    eu-central-1:
      "SnapStart": "true"
    eu-west-1:
      "SnapStart": "true"
    eu-north-1:
      "SnapStart": "true"
    us-west-1:
      "SnapStart": "false"
    af-south-1:
      "SnapStart": "false"
    ap-east-1:
      "SnapStart": "false"
    ap-south-2:
      "SnapStart": "false"
    ap-southeast-3:
      "SnapStart": "false"
    ap-southeast-4:
      "SnapStart": "false"
    ap-south-1:
      "SnapStart": "false"
    ap-northeast-3:
      "SnapStart": "false"
    ap-northeast-2:
      "SnapStart": "false"
    ca-central-1:
      "SnapStart": "false"
    eu-west-2:
      "SnapStart": "false"
    eu-south-1:
      "SnapStart": "false"
    eu-west-3:
      "SnapStart": "false"
    eu-south-2:
      "SnapStart": "false"
    eu-central-2:
      "SnapStart": "false"
    me-south-1:
      "SnapStart": "false"
    me-central-1:
      "SnapStart": "false"
    sa-east-1:
      "SnapStart": "false"

Conditions:
  CreateServerlessCluster: !Equals [!Ref RDSClusterMode, "Serverless"]
  CreateStandardCluster: !Equals [ !Ref RDSClusterMode, "Standard" ]
  AutoPauseClusterCondition: !Equals [!Ref AutoPauseCluster, "true"]
  EnableSnapStart: !Equals [!FindInMap [SnapStartRegionMap, !Ref "AWS::Region", SnapStart], "true"]
  AppSyncApiAuth: !Equals [!Ref AppSyncAuthenticationType, "API_KEY"]

Resources:
  Cloud9IDE:
    Type: AWS::Cloud9::EnvironmentEC2
    Condition: CreateStandardCluster
    Properties:
      AutomaticStopTimeMinutes: !Ref AutoHibernateTimeout
      Description: "Cloud9 IDE to interact with Aurora PostgreSQL"
      InstanceType: !Ref Cloud9InstanceType
      ImageId: amazonlinux-2-x86_64
      Name: PostgreSQLInstance
      SubnetId: !Ref PublicSubnetOne

  VPCFlowLogsRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ""
            Effect: "Allow"
            Principal:
              Service: "vpc-flow-logs.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "vpc-flow-logs-rds"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogGroups"
                  - "logs:DescribeLogStreams"
                Resource: !GetAtt VPCFlowLogsGroupRDS.Arn

  FlowLogsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: A symmetric CMK for encrypting flow logs
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Id: keyForFlowLogs
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: kms:*
            Resource: "*"
          - Sid: Allow log encryption
            Effect: Allow
            Principal:
              Service: !Sub logs.${AWS::Region}.amazonaws.com
            Action:
              - kms:Encrypt*
              - kms:Decrypt*
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:Describe*
            Resource: "*"
            Condition:
              ArnLike:
                kms:EncryptionContext:aws:logs:arn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}-VPCFlowLogsGroupRDS*

  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com
      Policies:
        - PolicyName: codebuild
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub "arn:aws:s3:::${ArtifactsBucket}"
                  - !Sub "arn:aws:s3:::${ArtifactsBucket}/*"
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - s3:ListBucket

  AppSyncLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com
      Policies:
        - PolicyName: Lambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:invokeFunction
                Resource: !Ref RDSResolverLambdaVersion

  ##########################################################################
  # N E T W O R K I N G
  ##########################################################################

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref VPCCIDR
      Tags:
        - Key: Name
          Value: "GraphQL-RDS-VPC"

  VPCFlowLogsGroupRDS:
    Type: "AWS::Logs::LogGroup"
    Properties:
      KmsKeyId: !GetAtt FlowLogsKey.Arn
      RetentionInDays: 7

  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      LogGroupName: !Ref VPCFlowLogsGroupRDS
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL
      DeliverLogsPermissionArn: !GetAtt VPCFlowLogsRole.Arn

  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref "VPC"
      CidrBlock: !Ref PrivateSubnetOneCIDR
      Tags:
        - Key: Name
          Value: "Private Subnet One"

  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref "VPC"
      CidrBlock: !Ref PrivateSubnetTwoCIDR
      Tags:
        - Key: Name
          Value: "Private Subnet Two"

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref "VPC"
      CidrBlock: !Ref PublicSubnetOneCIDR
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: "Public Subnet One"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - Ref: AWS::StackName
                - InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref "VPC"
      InternetGatewayId: !Ref InternetGateway

  NatGatewayOneEIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NatGatewayOne:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayOneEIP.AllocationId
      SubnetId: !Ref PublicSubnetOne

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - Ref: AWS::StackName
                - PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "RDS Route Table"

  PrivateSubnetOneRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnetOne
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetTwoRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnetTwo
      RouteTableId: !Ref PrivateRouteTable

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayOne

  SSMVPCEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssm'
      PrivateDnsEnabled: true
      VpcId: !Ref VPC
      SubnetIds: [!Ref PrivateSubnetOne, !Ref PrivateSubnetTwo]
      SecurityGroupIds: [!Ref VpcEndpointSecurityGroup]

  SecretsManagerVPCEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.secretsmanager'
      PrivateDnsEnabled: true
      VpcId: !Ref VPC
      SubnetIds: [!Ref PrivateSubnetOne, !Ref PrivateSubnetTwo]
      SecurityGroupIds: [!Ref VpcEndpointSecurityGroup]

  ##########################################################################
  # I A M
  ##########################################################################

  RDSResolverLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SSMParameterStore
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${MyOrderParameter}"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${MyOrderItemParameter}"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${MyProductParameter}"
        - PolicyName: SecretsManager
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !If
                  - CreateStandardCluster
                  - !Ref RDSSecret
                  - !Ref ServerlessRDSSecret
        - PolicyName: KMS
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource: !If
                  - CreateStandardCluster
                  - !GetAtt RDSSecretsKey.Arn
                  - !GetAtt ServerlessRDSSecretsKey.Arn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  RDSResolverLambda:
    Type: AWS::Lambda::Function
    DependsOn: CodeBuildRun
    Properties:
      Handler: "graphql.appsync.AppSyncSqlResolverLambdaRequestHandler::handleRequest"
      Runtime: java11
      MemorySize: 512
      Timeout: 120
      SnapStart:
        !If
        - EnableSnapStart
        -
          ApplyOn: PublishedVersions
        - !Ref "AWS::NoValue"
      Role: !GetAtt RDSResolverLambdaRole.Arn
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref GraphQLAdapterName
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnetOne
          - !Ref PrivateSubnetTwo

  RDSResolverLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !GetAtt RDSResolverLambda.Arn
      Description: v1

  ################
  # S3
  ################

  ArtifactsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AccessControl: LogDeliveryWrite
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  ArtifactsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArtifactsBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - "s3:*"
            Effect: "Deny"
            Principal: "*"
            Resource:
              - !GetAtt ArtifactsBucket.Arn
              - !Sub "${ArtifactsBucket.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": false

  ##########################################################################
  # CodeBuild
  ##########################################################################

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
      Policies:
        - PolicyName: codebuild
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub "arn:aws:s3:::${ArtifactsBucket}"
                  - !Sub "arn:aws:s3:::${ArtifactsBucket}/*"
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - s3:PutObject
                  - s3:ListBucket
              - Resource: !If
                  - CreateStandardCluster
                  - !Ref RDSSecret
                  - !Ref ServerlessRDSSecret
                Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
              - Resource: !If
                  - CreateStandardCluster
                  - !GetAtt RDSSecretsKey.Arn
                  - !GetAtt ServerlessRDSSecretsKey.Arn
                Effect: Allow
                Action:
                  - kms:Decrypt
              - Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*:*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Resource: "*"
                Effect: Allow
                Action:
                  - ec2:DescribeSecurityGroups
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeDhcpOptions
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeSubnets
                  - ec2:DescribeVpcs
              - Resource: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*'
                Effect: Allow
                Action:
                  - ec2:CreateNetworkInterfacePermission
                Condition:
                  StringEquals:
                    'ec2:AuthorizedService': codebuild.amazonaws.com
                  ArnEquals:
                    'ec2:Subnet':
                      - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnetOne}'
                      - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnetTwo}'

  RDSWaitHandle:
    Condition: CreateStandardCluster
    DependsOn: RDSDBInstance1
    Type: "AWS::CloudFormation::WaitConditionHandle"

  ServerlessRDSWaitHandle:
    Condition: CreateServerlessCluster
    DependsOn: ServerlessRDSCluster
    Type: "AWS::CloudFormation::WaitConditionHandle"

  RDSWaitCondition:
    Type: "AWS::CloudFormation::WaitCondition"
    Properties:
      Handle: !If
        - CreateStandardCluster
        - !Ref RDSWaitHandle
        - !Ref ServerlessRDSWaitHandle
      Timeout: "1"
      Count: 0

  SMAttachmentWaitHandle:
    Condition: CreateStandardCluster
    DependsOn: SMRDSAttachment
    Type: "AWS::CloudFormation::WaitConditionHandle"

  SMServerlessAttachmentWaitHandle:
    Condition: CreateServerlessCluster
    DependsOn: SMServerlessRDSAttachment
    Type: "AWS::CloudFormation::WaitConditionHandle"

  SMAttachmentWaitCondition:
    Type: "AWS::CloudFormation::WaitCondition"
    Properties:
      Handle: !If
        - CreateStandardCluster
        - !Ref SMAttachmentWaitHandle
        - !Ref SMServerlessAttachmentWaitHandle
      Timeout: "1"
      Count: 0


  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    DependsOn:
      - RDSWaitCondition
      - SMAttachmentWaitCondition
    Properties:
      Description: !Sub >-
        GraphQL setup for: ${AWS::StackName}
      ServiceRole: !Ref CodeBuildServiceRole
      EncryptionKey: alias/aws/s3
      Artifacts:
        Type: NO_ARTIFACTS
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo `ls -altr`
                - echo `pwd`
            build:
              commands:
                - echo Build started on `date`
                - wget $GRAPHQL_ADAPTER_LOCATION
                - wget $GRAPHQL_SCHEMA_LOCATION
                - ls -lrt
                - aws s3 cp $GRAPHQL_ADAPTER_NAME s3://$ARTIFACTS_BUCKET_LOCATION/
                - aws s3 cp $GRAPHQL_SCHEMA_NAME s3://$ARTIFACTS_BUCKET_LOCATION/

                - sudo yum update -y
                - sudo yum install -y autoconf readline-devel zlib-devel jq
                - sudo yum install -y gcc jemalloc-devel openssl-devel tcl tcl-devel clang wget
                - wget https://ftp.postgresql.org/pub/source/v12.5/postgresql-12.5.tar.gz
                - tar -xzf postgresql-12.5.tar.gz
                - cd postgresql-12.5
                - autoconf
                - ./configure
                - make -j 4 all
                - sudo make install
                - wget $SCHEMA_DDL_LOCATION
                - export DBUSER=`aws secretsmanager get-secret-value  --secret-id $SECRET_NAME --region $AWS_DEFAULT_REGION --query 'SecretString' --output text | jq -r '."username"'`
                - export PORT=`aws secretsmanager get-secret-value  --secret-id $SECRET_NAME --region $AWS_DEFAULT_REGION --query 'SecretString' --output text | jq -r '."port"'` 
                - export DB=`aws secretsmanager get-secret-value  --secret-id $SECRET_NAME --region $AWS_DEFAULT_REGION --query 'SecretString' --output text | jq -r '."dbname"'`
                - export HOST=`aws secretsmanager get-secret-value  --secret-id $SECRET_NAME --region $AWS_DEFAULT_REGION --query 'SecretString' --output text | jq -r '."host"'`
                - export DBPASSWORD=`aws secretsmanager get-secret-value  --secret-id $SECRET_NAME --region $AWS_DEFAULT_REGION --query 'SecretString' --output text | jq -r '."password"'`
                - export PGPASSWORD=$DBPASSWORD
                - cat $SCHEMA_DDL_NAME | psql -h$HOST -p $PORT -U$DBUSER -d $DB 
            post_build:
              commands:
                - echo Build completed on `date`
          artifacts:
            files:
              - build.json
      Environment:
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        Type: LINUX_CONTAINER
        PrivilegedMode: True
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: GRAPHQL_ADAPTER_LOCATION
            Value: !Ref GraphQLAdapterLocation
          - Name: GRAPHQL_ADAPTER_NAME
            Value: !Ref GraphQLAdapterName
          - Name: GRAPHQL_SCHEMA_LOCATION
            Value: !Ref GraphQLSchemaLocation
          - Name: GRAPHQL_SCHEMA_NAME
            Value: !Ref GraphQLSchemaName
          - Name: SCHEMA_DDL_LOCATION
            Value: !Ref RDSSchemaLocation
          - Name: SCHEMA_DDL_NAME
            Value: !Ref RDSSchemaName
          - Name: ARTIFACTS_BUCKET_LOCATION
            Value: !Ref ArtifactsBucket
          - Name: SECRET_NAME
            Value: !If
              - CreateStandardCluster
              - !Ref RDSSecret
              - !Ref ServerlessRDSSecret
      TimeoutInMinutes: 60
      VpcConfig:
        VpcId:
          !Ref VPC
        SecurityGroupIds:
          - !Ref CodeBuildSecurityGroup
        Subnets:
          - !Ref PrivateSubnetOne
          - !Ref PrivateSubnetTwo

  LambdaStartCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource: !GetAtt CodeBuildProject.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Effect: Allow
                Action:
                  - lambda:AddPermission
                  - lambda:RemovePermission
                Resource:
                  - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*"

  CodeBuildRun:
    Type: Custom::CodeBuildRun
    Properties:
      ServiceToken: !GetAtt LambdaCodeBuildStartBuild.Arn
      ProjectName: !Ref CodeBuildProject

  LambdaCodeBuildStartBuild:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt LambdaStartCodeBuildRole.Arn
      Runtime: python3.9
      Timeout: 600
      MemorySize: 128
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import json
          import boto3
          import time
          import botocore
          import subprocess
          import sys
          import os
          from botocore.exceptions import ClientError
          subprocess.call('pip install requests -t /tmp/ --no-cache-dir'.split(), stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
          sys.path.insert(1, '/tmp/')
          import requests

          def lambda_handler(event, context):
              if (event['RequestType'] == 'Update' or event['RequestType'] == 'Delete'):
                respond_cloudformation(event, "SUCCESS",
                                              {"Message": \
                                                  "Delete or Update request", \
                                              })
                return

              client = boto3.client('codebuild')
              try:
                response = client.start_build(
                            projectName=event['ResourceProperties']['ProjectName'])
              except botocore.exceptions.ClientError as exception:
                print("An error occurred. Error Stack: {}".format(exception))
                respond_cloudformation(event, "FAILURE",
                                              {"Message": \
                                                  "Error during triggering code build", \
                                              })
                sys.exit(0)

              time.sleep(300)
              respond_cloudformation(event, "SUCCESS",
                                              {"Message": \
                                                  "Triggered Code Build", \
                                              })

          def respond_cloudformation(event, status, data=None):
              """ Respond to CloudFormation event """
              responseBody = {
                  'Status': status,
                  'Reason': 'Refer to CloudWatch Log Stream',
                  'PhysicalResourceId': event['ServiceToken'],
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'Data': data
              }
              print('Response = ' + json.dumps(responseBody))
              print(event)
              requests.put(event['ResponseURL'], data=json.dumps(responseBody))
      Description: This AWS Lambda Function kicks off a code build job.

  ##########################################################################
  # C O N F I G U R A T I O N
  ##########################################################################

  MyOrderParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /appsync/typemetadata/Graphqlsample_MyOrder
      Type: String
      Value: !Sub
        - | 
          {
            "secretName":"${SecretName}", 
              "secretRegion": "${AWS::Region}",
              "fieldTypes": {
                "OrderId": "String",
                "OrderDate": "AWSDateTime",
                "Status": "String",
                "TotalCost": "Float",
                "SourceIpAddress": "AWSIPAddress" 
              },
              "keyColumns": ["OrderId"]
            }
        - {
          SecretName: !If [CreateStandardCluster, !Ref RDSSecret, !Ref ServerlessRDSSecret]
        }

  MyOrderItemParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /appsync/typemetadata/Graphqlsample_MyOrderItem
      Type: String
      Value: !Sub
        - | 
          {
            "secretName":"${SecretName}", 
            "secretRegion": "${AWS::Region}",
            "fieldTypes": {
               "ParentOrderId": "String",
               "ParentProductId": "String",
               "Quantity": "Int" 
            },
            "keyColumns": ["ParentOrderId", "ParentProductId"]
          }
        - {
          SecretName: !If [CreateStandardCluster, !Ref RDSSecret, !Ref ServerlessRDSSecret]
        }
  MyProductParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /appsync/typemetadata/Graphqlsample_MyProduct
      Type: String
      Value: !Sub
        - | 
          {
            "secretName":"${SecretName}", 
              "secretRegion": "${AWS::Region}",
              "fieldTypes": {
                "ProductId": "String",
                "Name": "String",
                "Price": "Float",
                "Discontinued": "Boolean"
              },
              "keyColumns": ["ProductId"]
          }
        - {
          SecretName: !If [CreateStandardCluster, !Ref RDSSecret, !Ref ServerlessRDSSecret]
        }

  ##########################################################################
  # CLEANUP
  ##########################################################################

  ArtifactsBucketDeleteLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:DeleteBucket
                  - s3:ListBucket
                  - s3:ListBucketVersions
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                Resource:
                  - !Sub "arn:aws:s3:::${ArtifactsBucket}"
                  - !Sub "arn:aws:s3:::${ArtifactsBucket}/*"
          PolicyName: ArtifactDeleteS3BucketPolicy

  ArtifactsBucketDeleteLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.lambda_handler"
      Runtime: python3.9
      MemorySize: 128
      Timeout: 120
      Role: !GetAtt ArtifactsBucketDeleteLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          def deleteS3Bucket(bucketName):
             print("Deleting S3 Bucket %s" % bucketName)
             bucket = boto3.resource("s3").Bucket(bucketName)
             bucket.object_versions.all().delete()
             bucket.delete()
          def lambda_handler(event, context):
            print(event)
            responseData = {}
            status = cfnresponse.SUCCESS
            reason = "Success"
            if event['RequestType'] == 'Delete':
              try:
                deleteS3Bucket(event['ResourceProperties']['BucketName'])
              except Exception as e:
                print(e)
                reason = f"Exception thrown: {e}"
                status = cfnresponse.FAILED
            cfnresponse.send(event, context, status, responseData, reason=reason)

  CleanupArtifactsBucket:
    Type: Custom::CleanupArtifactsBucket
    Properties:
      ServiceToken: !GetAtt ArtifactsBucketDeleteLambda.Arn
      BucketName: !Ref ArtifactsBucket

  ##########################################################################
  # A U R O R A   P O S T G R E S Q L
  ##########################################################################

  CodeBuildSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Private SG For internal communication
      VpcId: !Ref "VPC"

  CodeBuildSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow EC2 Instance to connect
      GroupId: !Ref CodeBuildSecurityGroup
      IpProtocol: "tcp"
      FromPort: 0
      ToPort: 0
      SourceSecurityGroupId: !GetAtt CodeBuildSecurityGroup.GroupId

  CodeBuildSecurityGroupEgress1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow CodeBuild to download packages from the internet
      GroupId: !Ref CodeBuildSecurityGroup
      IpProtocol: "tcp"
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0

  CodeBuildSecurityGroupEgress2:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow CodeBuild to download packages from the internet
      GroupId: !Ref CodeBuildSecurityGroup
      IpProtocol: "tcp"
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0

  CodeBuildSecurityGroupEgress3:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow CodeBuild to download packages from the internet
      GroupId: !Ref CodeBuildSecurityGroup
      IpProtocol: "tcp"
      FromPort: 5432
      ToPort: 5432
      DestinationSecurityGroupId: !GetAtt RDSSecurityGroup.GroupId

  VpcEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Private SG For internal communication
      VpcId: !Ref "VPC"

  VpcEndpointSecurityGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow EC2 Instance to connect
      GroupId: !Ref VpcEndpointSecurityGroup
      IpProtocol: "tcp"
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !GetAtt CodeBuildSecurityGroup.GroupId

  VpcEndpointSecurityGroupIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow EC2 Instance to connect
      GroupId: !Ref VpcEndpointSecurityGroup
      IpProtocol: "tcp"
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !GetAtt LambdaSecurityGroup.GroupId

  VpcEndpointSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: To communicate within the SG
      GroupId: !Ref VpcEndpointSecurityGroup
      IpProtocol: "tcp"
      FromPort: 0
      ToPort: 0
      DestinationSecurityGroupId: !GetAtt VpcEndpointSecurityGroup.GroupId

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Private SG For internal communication
      VpcId: !Ref "VPC"

  LambdaSecurityGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow EC2 Instance to connect
      GroupId: !Ref LambdaSecurityGroup
      IpProtocol: "tcp"
      FromPort: 0
      ToPort: 0
      SourceSecurityGroupId: !GetAtt LambdaSecurityGroup.GroupId

  LambdaSecurityGroupEgress1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow EC2 Instance to connect
      GroupId: !Ref LambdaSecurityGroup
      IpProtocol: "tcp"
      FromPort: 443
      ToPort: 443
      DestinationSecurityGroupId: !GetAtt VpcEndpointSecurityGroup.GroupId

  LambdaSecurityGroupEgress2:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow EC2 Instance to connect
      GroupId: !Ref LambdaSecurityGroup
      IpProtocol: "tcp"
      FromPort: 5432
      ToPort: 5432
      DestinationSecurityGroupId: !GetAtt RDSSecurityGroup.GroupId

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Private SG For internal communication
      VpcId: !Ref "VPC"

  RDSSecurityGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow EC2 Instance to connect
      GroupId: !Ref RDSSecurityGroup
      IpProtocol: "tcp"
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !GetAtt CodeBuildSecurityGroup.GroupId

  RDSSecurityGroupIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow EC2 Instance to connect
      GroupId: !Ref RDSSecurityGroup
      IpProtocol: "tcp"
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !GetAtt LambdaSecurityGroup.GroupId

  RDSSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: To communicate within the SG
      GroupId: !Ref RDSSecurityGroup
      IpProtocol: "tcp"
      FromPort: 0
      ToPort: 0
      DestinationSecurityGroupId: !GetAtt RDSSecurityGroup.GroupId

  RDSSecretsKey:
    Type: AWS::KMS::Key
    Condition: CreateStandardCluster
    Properties:
      Description: An symmetric CMK for Secrets Manager
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Id: keyForSecrets
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: kms:*
            Resource: "*"

  RDSSecret:
    Type: "AWS::SecretsManager::Secret"
    Condition: CreateStandardCluster
    Properties:
      Name: /graphqlrds/dbsecret
      Description: Generates random value for db password and stores in secrets manager
      KmsKeyId: !Ref RDSSecretsKey
      GenerateSecretString:
        SecretStringTemplate: '{"username": "dbadmin", "databaseName": "graphqlrds", "vendor": "PostgreSQL", "port": "5432", "host": " "}'
        GenerateStringKey: "password"
        PasswordLength: 20
        ExcludeCharacters: "\"@/\\;.:+' %"

  RDSCluster:
    Type: "AWS::RDS::DBCluster"
    Condition: CreateStandardCluster
    Properties:
      DBClusterIdentifier: graphql-rds-cluster
      DBClusterParameterGroupName: !Ref RDSDBClusterParameterGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: aurora-postgresql
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${RDSSecret}::password}}"
      MasterUsername: dbadmin
      DatabaseName: "graphqlrds"
      Port: 5432
      StorageEncrypted: true
      VpcSecurityGroupIds: [!Ref RDSSecurityGroup]
      Tags:
        - Key: Name
          Value: graphql-rds-cluster

  RDSDBClusterParameterGroup:
    Type: "AWS::RDS::DBClusterParameterGroup"
    Condition: CreateStandardCluster
    Properties:
      Description: "Aurora Cluster Parameter Group"
      Family: aurora-postgresql13
      Parameters:
        rds.logical_replication: 1
        wal_sender_timeout: 0

  RDSDBInstance1:
    Type: "AWS::RDS::DBInstance"
    Condition: CreateStandardCluster
    Properties:
      AvailabilityZone: !GetAtt PrivateSubnetOne.AvailabilityZone
      DBClusterIdentifier: !Ref RDSCluster
      DBInstanceClass: !Ref DBInstanceClass
      DBParameterGroupName: !Ref RDSDBParameterGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: aurora-postgresql
      PubliclyAccessible: false

  RDSDBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Condition: CreateStandardCluster
    Properties:
      Description: Aurora Parameter Group
      Family: aurora-postgresql13

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: String
      DBSubnetGroupName: graphql-rds-subnet-group
      SubnetIds: [!Ref PrivateSubnetOne, !Ref PrivateSubnetTwo]

  SMRDSAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Condition: CreateStandardCluster
    Properties:
      SecretId: !Ref RDSSecret
      TargetId: !Ref RDSDBInstance1
      TargetType: AWS::RDS::DBInstance

  ServerlessRDSSecretsKey:
    Type: AWS::KMS::Key
    Condition: CreateServerlessCluster
    Properties:
      Description: An symmetric CMK for Secrets Manager
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Id: keyForSecrets
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: kms:*
            Resource: "*"

  ServerlessRDSSecret:
    Type: "AWS::SecretsManager::Secret"
    Condition: CreateServerlessCluster
    Properties:
      Name: /graphqlrdsserverless/dbsecret
      Description: Generates random value for db password and stores in secrets manager
      KmsKeyId: !Ref ServerlessRDSSecretsKey
      GenerateSecretString:
        SecretStringTemplate: '{"username": "dbadmin", "databaseName": "graphqlrds", "vendor": "PostgreSQL", "port": "5432", "host": " "}'
        GenerateStringKey: "password"
        PasswordLength: 20
        ExcludeCharacters: "\"@/\\;.:+' %"

  ServerlessRDSCluster:
    Type: "AWS::RDS::DBCluster"
    Condition: CreateServerlessCluster
    Properties:
      DBClusterIdentifier: graphql-rds-serverless-cluster
      DBClusterParameterGroupName: !Ref ServerlessRDSDBClusterParameterGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: aurora-postgresql
      EngineMode: serverless
      EngineVersion: 11.13
      EnableHttpEndpoint: true
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${ServerlessRDSSecret}::password}}"
      MasterUsername: dbadmin
      DatabaseName: "graphqlrds"
      Port: 5432
      ScalingConfiguration:
        AutoPause: !If
          - AutoPauseClusterCondition
          - true
          - false
        SecondsUntilAutoPause: !If
          - AutoPauseClusterCondition
          - !Ref SecondsUntilAutoPause
          - !Ref AWS::NoValue
        MaxCapacity: !Ref MaxCapacity
        MinCapacity: !Ref MinCapacity
      StorageEncrypted: true
      VpcSecurityGroupIds: [!Ref RDSSecurityGroup]
      Tags:
        - Key: Name
          Value: graphql-rds-serverless-cluster

  ServerlessRDSDBClusterParameterGroup:
    Type: "AWS::RDS::DBClusterParameterGroup"
    Condition: CreateServerlessCluster
    Properties:
      Description: "Aurora Serverless Cluster Parameter Group"
      Family: aurora-postgresql11
      Parameters:
        rds.logical_replication: 1
        wal_sender_timeout: 0

  SMServerlessRDSAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Condition: CreateServerlessCluster
    Properties:
      SecretId: !Ref ServerlessRDSSecret
      TargetId: !Ref ServerlessRDSCluster
      TargetType: AWS::RDS::DBCluster

  AppSyncApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub "GraphQL-RDS-${AWS::StackName}"
      AuthenticationType: !Ref AppSyncAuthenticationType
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt AppSyncServiceRole.Arn
        ExcludeVerboseContent: FALSE
        FieldLogLevel: ALL

  AppSyncApiKey:
    Type: AWS::AppSync::ApiKey
    Condition: AppSyncApiAuth
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId

  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    DependsOn: CodeBuildRun
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DefinitionS3Location: !Sub "s3://${ArtifactsBucket}/${GraphQLSchemaName}"

  AppSyncDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: RDSResolvers
      Description: RDS GraphQL Resolver Data Source
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt AppSyncLambdaRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !Ref RDSResolverLambdaVersion

  CreateMyOrderResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DataSourceName: !GetAtt AppSyncDataSource.Name
      TypeName: Mutation
      FieldName: create_Graphqlsample_MyOrder

  CreateMyOrderItemResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DataSourceName: !GetAtt AppSyncDataSource.Name
      TypeName: Mutation
      FieldName: create_Graphqlsample_MyOrderItem

  CreateMyProductResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DataSourceName: !GetAtt AppSyncDataSource.Name
      TypeName: Mutation
      FieldName: create_Graphqlsample_MyProduct

  DeleteMyOrderResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DataSourceName: !GetAtt AppSyncDataSource.Name
      TypeName: Mutation
      FieldName: delete_Graphqlsample_MyOrder

  DeleteMyOrderItemResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DataSourceName: !GetAtt AppSyncDataSource.Name
      TypeName: Mutation
      FieldName: delete_Graphqlsample_MyOrderItem

  DeleteMyProductResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DataSourceName: !GetAtt AppSyncDataSource.Name
      TypeName: Mutation
      FieldName: delete_Graphqlsample_MyProduct

  UpdateMyOrderResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DataSourceName: !GetAtt AppSyncDataSource.Name
      TypeName: Mutation
      FieldName: update_Graphqlsample_MyOrder

  UpdateMyOrderItemResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DataSourceName: !GetAtt AppSyncDataSource.Name
      TypeName: Mutation
      FieldName: update_Graphqlsample_MyOrderItem

  UpdateMyProductResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DataSourceName: !GetAtt AppSyncDataSource.Name
      TypeName: Mutation
      FieldName: update_Graphqlsample_MyProduct

  QueryMyOrderResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DataSourceName: !GetAtt AppSyncDataSource.Name
      TypeName: Query
      FieldName: graphqlsample_MyOrder

  QueryMyOrderItemResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DataSourceName: !GetAtt AppSyncDataSource.Name
      TypeName: Query
      FieldName: graphqlsample_MyOrderItem

  QueryMyProductResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DataSourceName: !GetAtt AppSyncDataSource.Name
      TypeName: Query
      FieldName: graphqlsample_MyProduct

  QueryNodeResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DataSourceName: !GetAtt AppSyncDataSource.Name
      TypeName: Query
      FieldName: node
